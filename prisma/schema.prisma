// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("MYSQL_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  email     String?  @unique
  name      String?
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]
  recipes   Recipe[]
  isAdmin   Boolean  @default(false)
}

model Category {
  id          Int      @id @default(autoincrement())
  slug        String   @unique // URL友好的标识符
  title       String   // 分类名称
  description String?  // 分类描述
  color       String?  // 分类颜色
  image       String?  // 分类图片
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  posts       Post[]   // 关联的文章
  recipes     Recipe[]
}

model Post {
  id          Int       @id @default(autoincrement())
  title       String    // 文章标题
  slug        String    @unique // URL友好的标识符
  content     String    @db.Text // 文章内容
  description String?   @db.Text // 文章描述/摘要
  image       String?   // 封面图片
  views       Int       @default(0) // 浏览量
  featured    Boolean   @default(false) // 是否为特色文章
  published   Boolean   @default(false) // 是否发布
  createdAt   DateTime  @default(now()) // 创建时间
  updatedAt   DateTime  @updatedAt // 更新时间
  author      User      @relation(fields: [authorId], references: [id]) // 作者关联
  authorId    Int
  category    Category  @relation(fields: [categoryId], references: [id]) // 分类关联
  categoryId  Int
  tags        Tag[]     // 标签关联
  isRecipe    Boolean   @default(false) // 是否为食谱
}

model Recipe {
  id           Int      @id @default(autoincrement())
  title        String   // 食谱标题
  description  String?  @db.Text // 食谱描述
  slug         String   @unique // URL友好的标识符
  ingredients  Ingredient[] // 食材关系
  steps        String   @db.Text // 烹饪步骤
  cookingTime  Int?     // 烹饪时间（分钟）
  servings     Int?     // 份量
  difficulty   String?  // 难度级别
  image        String?  // 成品图片
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  author       User     @relation(fields: [authorId], references: [id]) // 作者关联
  authorId     Int
  category     Category  @relation(fields: [categoryId], references: [id])
  categoryId   Int
  tags         Tag[]    // 添加这行来完成与 Tag 的多对多关系
  nutrition    Nutrition?
}

model Nutrition {
  id          Int      @id @default(autoincrement())
  calories    Float?   // 卡路里
  protein     Float?   // 蛋白质（克）
  carbs       Float?   // 碳水化合物（克）
  fat         Float?   // 脂肪（克）
  fiber       Float?   // 膳食纤维（克）
  recipe      Recipe   @relation(fields: [recipeId], references: [id])
  recipeId    Int      @unique
}

model Tag {
  id        String    @id @default(cuid())
  name      String    @unique
  slug      String    @unique
  posts     Post[]    
  recipes   Recipe[]  // 添加这行，建立与 Recipe 的多对多关系
  createdAt DateTime  @default(now())
}

// 用于记录文章的浏览历史
model ViewHistory {
  id        Int      @id @default(autoincrement())
  postId    Int
  ip        String?  // 访问者IP
  userAgent String?  // 浏览器信息
  viewedAt  DateTime @default(now())

  @@index([postId, viewedAt])
}

model Ingredient {
  id        Int      @id @default(autoincrement())
  name      String   // 食材名称
  amount    Float    // 数量
  unit      String   // 单位（如克、个、片等）
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId  Int

  @@index([recipeId])
}

